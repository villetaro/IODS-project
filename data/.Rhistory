summary(model5)
Testii <- subset(newDataFrame, bachelor == 1)
Testii
model5 <- lm(AHE ~ age, data = Testii)
summary(model5)
Testii <- subset(newDataFrame, bachelor == 0)
model5 <- lm(AHE ~ age, data = Testii)
summary(model5)
model5 <- lm(AHE ~ age, data = Testii)
model5$newse = vcovHC(model5)
coeftest(model5,model5$newse)
model6 <- lm(AHE ~ age, data = Testii2)
model6$newse = vcovHC(model6)
coeftest(model6,model6$newse)
Testii2 <- subset(newDataFrame, bachelor == 1)
model6 <- lm(AHE ~ age, data = Testii2)
model6$newse = vcovHC(model6)
coeftest(model6,model6$newse)
setwd("~/GitHub/IODS-project")
library(MASS)
data("Boston")
summary(Boston)
str(Boston)
dim(Boston)
str(Boston)
pairs(Boston)
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits = 2)
library(corrplot)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits = 2)
corrplot(cor_matrix, method="circle", type = "upper")
summary(Boston)
summary(Boston)
corrplot(cor_matrix, method="circle", type = "upper",  cl.pos="b", tl.pos="d", tl.cex=0.6))
corrplot(cor_matrix, method="circle", type = "upper",  cl.pos="b", tl.pos="d", tl.cex=0.6)
corrplot(cor_matrix, method="circle", type = "upper",  cl.pos="a", tl.pos="d", tl.cex=0.6)
corrplot(cor_matrix, method="circle", type = "upper",  cl.pos="b", tl.pos="u", tl.cex=0.6)
corrplot(cor_matrix, method="circle", type = "upper",  cl.pos="b", tl.pos="d", tl.cex=0.6)
corrplot(cor_matrix, method="circle", type = "upper",  cl.pos="b", tl.pos="d", tl.cex=1)
corrplot(cor_matrix, method="circle", type = "upper",  cl.pos="b", tl.pos="d", tl.cex=0.5)
corrplot(cor_matrix, method="circle", type = "upper",  cl.pos="b", tl.pos="d", tl.cex=0.7)
corrplot(cor_matrix, method="circle", type = "upper",  cl.pos="b", tl.pos="d", tl.cex=0.6)
corrplot(cor_matrix, method="pie", type = "upper",  cl.pos="b", tl.pos="d", tl.cex=0.6)
circle
corrplot(cor_matrix, method="circle", type = "upper",  cl.pos="b", tl.pos="d", tl.cex=0.6)
corrplot.mixed(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper",  cl.pos="b", tl.pos="d", tl.cex=0.5)
corrplot.mixed(cor_matrix)
corrplot(cor_matrix, order="hclust", addrect=2, col=wb, bg="gold2")
corrplot(cor_matrix, order="hclust", addrect=2, bg="gold2")
corrplot(cor_matrix, order="hclust", addrect=2, bg="gold1")
corrplot(cor_matrix, order="hclust", addrect=2, bg="gold3")
corrplot(cor_matrix, order="hclust", addrect=2, bg="gold2")
corrplot.mixed(cor_matrix, order="hclust", addrect=2, bg="gold2")
corrplot(cor_matrix, order="hclust", addrect=2, bg="gold2")
corrplot(cor_matrix, order="hclust", addrect=2, bg="gold2", col=col4(10))
wb <- c("white","black")
corrplot(cor_matrix, order="hclust", addrect=2, bg="gold2", col=wb)
library(MASS)
library(corrplot)
library(tidyverse)
data("Boston")
str(Boston)
dim(Boston)
summary(Boston)
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits = 2)
wb <- c("white","black")
corrplot(cor_matrix, order="hclust", addrect=2, bg="gold2", col=wb)
myboston_scaled <- scale(Boston)
summary(myboston_scaled)
lda.fit <- lda(crim_cat ~ ., data = train)
lda.fit
```{r}
cutoffs <- quantile(myboston_scaled$crim)
labels <- c("low", "mod_low", "mod_high", "high")
crim_cat <- cut(myboston_scaled$crim, breaks=cutoffs, include.lowest = TRUE, label = labels)
table(crim_cat)
crim_cat <- cut(myboston_scaled$crim, breaks=cutoffs, include.lowest = TRUE, label = labels)
cutoffs <- quantile(myboston_scaled$crim)
myboston_scaled <- scale(Boston)
summary(myboston_scaled)
cutoffs <- quantile(myboston_scaled$crim)
myboston_scaled$crim
myboston_scaled <- as.data.frame(myboston_scaled)
cutoffs <- quantile(myboston_scaled$crim)
labels <- c("low", "mod_low", "mod_high", "high")
crime_category <- cut(myboston_scaled$crim, breaks = cutoffs, include.lowest = TRUE, label = labels)
table(crime_category)
n <- nrow(myboston_scaled)
eighty_perc <- sample(n, size = n * 0.8)
train <- myboston_scaled[eighty_perc,]
test <- myboston_scaled[-eighty_perc,]
lda.fit <- lda(crime_category ~ ., data = train)
lda.fit
lda.fit <- lda(crime_category ~ ., data = train)
myboston_scaled <- dplyr::select(myboston_scaled, -crim)
myboston_scaled <- data.frame(myboston_scaled, crime_category)
str(myboston_scaled)
labels <- c("low", "mod_low", "med_high", "high")
crime_category <- cut(myboston_scaled$crim, breaks = cutoffs, include.lowest = TRUE, label = labels)
table(crime_category)
crime_category <- cut(myboston_scaled$crim, breaks = cutoffs, include.lowest = TRUE, label = labels)
table(crime_category)
myboston_scaled <- dplyr::select(myboston_scaled, -crim)
library(MASS)
library(corrplot)
library(tidyverse)
data("Boston")
str(Boston)
dim(Boston)
summary(Boston)
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits = 2)
wb <- c("white","black")
corrplot(cor_matrix, order="hclust", addrect=2, bg="gold2", col=wb)
myboston_scaled <- scale(Boston)
summary(myboston_scaled)
myboston_scaled <- as.data.frame(myboston_scaled)
cutoffs <- quantile(myboston_scaled$crim)
labels <- c("low", "mod_low", "med_high", "high")
crime_category <- cut(myboston_scaled$crim, breaks = cutoffs, include.lowest = TRUE, label = labels)
table(crime_category)
myboston_scaled <- dplyr::select(myboston_scaled, -crim)
myboston_scaled <- data.frame(myboston_scaled, crime_category)
str(myboston_scaled)
n <- nrow(myboston_scaled)
eighty_perc <- sample(n, size = n * 0.8)
train <- myboston_scaled[eighty_perc,]
test <- myboston_scaled[-eighty_perc,]
lda.fit <- lda(crime_category ~ ., data = train)
lda.fit
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
correct_classes <- test$crime_category
test <- dplyr::select(test, -crime_category)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
correct_classes <- test$crime_category
test <- dplyr::select(test, -crime_category)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
library(MASS)
library(corrplot)
library(tidyverse)
data("Boston")
str(Boston)
dim(Boston)
summary(Boston)
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits = 2)
wb <- c("white","black")
corrplot(cor_matrix, order="hclust", addrect=2, bg="gold2", col=wb)
myboston_scaled <- scale(Boston)
summary(myboston_scaled)
myboston_scaled <- as.data.frame(myboston_scaled)
cutoffs <- quantile(myboston_scaled$crim)
labels <- c("low", "mod_low", "med_high", "high")
crime_category <- cut(myboston_scaled$crim, breaks = cutoffs, include.lowest = TRUE, label = labels)
table(crime_category)
myboston_scaled <- dplyr::select(myboston_scaled, -crim)
myboston_scaled <- data.frame(myboston_scaled, crime_category)
str(myboston_scaled)
n <- nrow(myboston_scaled)
eighty_perc <- sample(n, size = n * 0.8)
train <- myboston_scaled[eighty_perc,]
test <- myboston_scaled[-eighty_perc,]
lda.fit <- lda(crime_category ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 0.5, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime_category)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 2)
correct_classes <- test$crime_category
test <- dplyr::select(test, -crime_category)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
total <- c(13+10+6+11+7+12+18+25)
total
correct <- c(13+18+11+25)
correct
wrong
wrong <- c(102-67)
wrong
ratio <- c(correct/total)
ratio
new_Boston <- Boston
new_Boston <- Boston
new_Boston_scaled <- scale(new_Boston) %>% as.data.frame()
class(new_Boston_scaled)
str(new_Boston_scaled)
New_Boston <- Boston
str(New_boston)
New_Boston_scaled <- scale(New_Boston) %>% as.data.frame()
str(New_Boston_scaled)
New_Boston_scaled <- scale(New_Boston) %>% as.data.frame()
str(New_Boston_scaled)
dist_eu <- dist(New_Boston_scaled)
summary(dist_eu)
head(dist_eu)
km <-kmeans(dist_eu, centers=4)
pairs(new_Boston_scaled, col = km$cluster)
ggpairs(new_Boston_scaled, col = km$cluster)
library(ggplot2)
ggplot(new_Boston_scaled, col = km$cluster)
ggpairs(new_Boston_scaled, col = km$cluster)
pairs(new_Boston_scaled, col = km$cluster)
km <-kmeans(dist_eu, centers=10)
pairs(new_Boston_scaled, col = km$cluster)
km <-kmeans(dist_eu, centers=2)
pairs(new_Boston_scaled, col = km$cluster)
summary(dist_eu)
wss <- (nrow(dist_eu)-1)*sum(apply(dist_eu,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(dist_eu,
centers=i)$withinss)
wss <- (nrow(dist_eu)-1)*sum(apply(dist_eu,2,var))
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
plot(1:k_max, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
km <-kmeans(dist_eu, centers=2)
pairs(new_Boston_scaled, col = km$cluster)
model_predictors <- dplyr::select(train, -crime)
dim(model_predictors)
dim(lda.fit$scaling)
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
model_predictors <- dplyr::select(train, -crime)
model_predictors <- dplyr::select(train, -crim)
dplyr
train <- myboston_scaled[eighty_perc,]
model_predictors <- dplyr::select(train, -crim)
train
model_predictors <- dplyr::select(train, -crime_category)
dim(model_predictors)
dim(lda.fit$scaling)
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
install.packages("Plotly")
install.packages("plotly")
install.packages("plotly")
library(plotly)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers')
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', col = crime_category)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colour = crime_category)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colours = crime_category)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colours = "crime_category")
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colour="crime_category")
labels <- c("low", "med_low", "med_high", "high")
myboston_scaled <- dplyr::select(myboston_scaled, -crim)
myboston_scaled <- dplyr::select(myboston_scaled, -crime_category)
myboston_scaled <- data.frame(myboston_scaled, crime_category)
str(myboston_scaled)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colour=crime_category)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colour=crime_category)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colour=5)
?plot_ly
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color=labels )
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color=labels)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colors=labels)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colors=km$cluster)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color=km$cluster)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color=km$cluster)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers')
myboston_scaled <- dplyr::select(myboston_scaled, -crim)
pairs(New_Boston_scaled, col = km$cluster)
library(plotly)
library(plotly)
model_predictors <- dplyr::select(train, -crime_category)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colour=5)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers')
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers' marker=list( size=20 , opacity=0.5), color = ~crime_category ,
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers'
marker=list( size=20 , opacity=0.5), color = ~crime_category ,
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers',
marker=list( size=20 , opacity=0.5), color = ~crime_category ,
colors=c("green","blue") )
model_predictors <- dplyr::select(train, -crime_category)
dim(model_predictors)
dim(lda.fit$scaling)
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colour=5)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers',  marker=list( size=20 , opacity=0.5), color = ~crime_category
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers',  marker=list( size=20 , opacity=0.5), color = ~crime_category)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = ~crime_category)
crime_category
labels <- c("low", "med_low", "med_high", "high")
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = ~labels)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colors = ~labels)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', colors = ~labels, marker=list( size=20 , opacity=0.5)  ))
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers')
set.seed(123)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = classes)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = classes)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = classes, marker=list( size=20 , opacity=0.5),
colors=c("green","blue") ))
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = classes,
marker=list( size=20 , opacity=0.5),
colors=c("green","blue") )
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = classes,
colors=c("green","blue") )
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = classes,
colors=c("red","yellow") )
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = classes,
colors=c("blue","yellow") )
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = kmeans)
km <-kmeans(dist_eu, centers=2)
kmeanss <- as.numeric(km)
km <- kmeans(dist_eu, centers=2)
kmeanss <- as.numeric(km)
unlist(km)
kmeanss <- as.numeric(unlist(km))
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = kmeanss)
setwd("~/GitHub/IODS-project/data")
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv")
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", na.strings = "..")
dim(hd)
dim(gii)
summary(hd)
summary(gii)
colnames(hd)
colnames(hd)[1] <- "HDI_rank"
colnames(hd)[2] <- "country"
colnames(hd)[3] <- "HDI"
colnames(hd)[4] <- "life_exp"
colnames(hd)[5] <- "edu_exp"
colnames(hd)[6] <- "edu_mean"
colnames(hd)[7] <- "GNI"
colnames(hd)[8] <- "GNI_netrank"
colnames(gii)
colnames(gii)[1] <- "GII_rank"
colnames(gii)[2] <- "country"
colnames(gii)[3] <- "GII"
colnames(gii)[4] <- "mat_mort"
colnames(gii)[5] <- "adol_birht"
colnames(gii)[6] <- "parl_rep"
colnames(gii)[7] <- "edu2F"
colnames(gii)[8] <- "edu2M"
colnames(gii)[9] <- "labF"
colnames(gii)[10] <- "labM"
colnames(gii)
gii <- mutate(gii, edu2F_edu2M = edu2F / edu2M)
gii <- mutate(gii, labF_labM = labF / labM)
library(dplyr)
hd_gii <- inner_join(hd, gii, by = "country")
write.csv(hd_gii, file = "human.csv", row.names = F)
dim(hd_gii)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = km$cluster,
colors=c("blue","yellow") )
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = km$cluster,
colors=c("blue","yellow") )
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers',
colors=c("blue","yellow") )
plot(lda.fit, dimen = 2)
plot(lda.fit, dimen = 2, col = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 2, col = classes)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 2, col = classes)
lda.arrows(lda.fit, myscale = 1)
```{r, echo=F}}
model_predictors <- dplyr::select(train, -crime_category)
dim(model_predictors)
dim(lda.fit$scaling)
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
labels <- c("low", "med_low", "med_high", "high")
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = classes,
colors=c("blue","yellow") )
model_predictors <- dplyr::select(train, -crime_category)
matrix_product <- as.matrix(model_predictors) %>% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
labels <- c("low", "med_low", "med_high", "high")
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = classes,
colors=c("blue","yellow") )
library(potly)
library(plotly)
```{r}
summary(Boston)
corrplot(cor_matrix, order="hclust", addrect=2, bg="gold2", col=wb)
myboston_scaled <- dplyr::select(myboston_scaled, -crim)
myboston_scaled <- data.frame(myboston_scaled, crime_category)
str(myboston_scaled)
lda.fit <- lda(crime_category ~ ., data = train)
lda.fit
correct_classes <- test$crime_category
test <- dplyr::select(test, -crime_category)
plot(lda.fits, dimen = 2, col = classes)
lda.arrows(lda.fits, myscale = 1)
km <-kmeans(dist_eu, centers = 3)
lda.fits <- lda(km$cluster~., data = myboston_scaled)
lda.fits
plot(lda.fits, dimen = 2, col = classes)
lda.arrows(lda.fits, myscale = 1)
plot(lda.fits, dimen = 2, col = classes)
lda.arrows(lda.fits, myscale = 1)
correct_classes <- test$crime_category
test <- dplyr::select(test, -crime_category)
library(dplyr)
correct_classes <- test$crime_category
test <- dplyr::select(test, -crime_category)
library(MASS)
library(corrplot)
library(tidyverse)
library(plotly)
library(dplyr)
data("Boston")
str(Boston)
dim(Boston)
summary(Boston)
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits = 2)
wb <- c("white","black")
corrplot(cor_matrix, order="hclust", addrect=2, bg="gold2", col=wb)
myboston_scaled <- scale(Boston)
summary(myboston_scaled)
myboston_scaled <- as.data.frame(myboston_scaled)
cutoffs <- quantile(myboston_scaled$crim)
labels <- c("low", "med_low", "med_high", "high")
crime_category <- cut(myboston_scaled$crim, breaks = cutoffs, include.lowest = TRUE, label = labels)
table(crime_category)
myboston_scaled <- dplyr::select(myboston_scaled, -crim)
myboston_scaled <- data.frame(myboston_scaled, crime_category)
str(myboston_scaled)
n <- nrow(myboston_scaled)
eighty_perc <- sample(n, size = n * 0.8)
train <- myboston_scaled[eighty_perc,]
test <- myboston_scaled[-eighty_perc,]
lda.fit <- lda(crime_category ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 0.5, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime_category)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 2)
correct_classes <- test$crime_category
test <- dplyr::select(test, -crime_category)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
total <- c(13+10+6+11+7+12+18+25)
total
correct <- c(13+18+11+25)
correct
wrong <- c(102-67)
wrong
ratio <- c(correct/total)
ratio
New_Boston <- Boston
str(New_Boston)
New_Boston_scaled <- scale(New_Boston) %>% as.data.frame()
str(New_Boston_scaled)
# Euclidean distance matrix using set.seed()
set.seed(123)
dist_eu <- dist(New_Boston_scaled)
summary(dist_eu)
library(ggplot2)
km <-kmeans(dist_eu, centers=10)
pairs(New_Boston_scaled, col = km$cluster)
k_max <- 10
wss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
km <-kmeans(dist_eu, centers=2)
pairs(New_Boston_scaled, col = km$cluster)
km <-kmeans(dist_eu, centers = 3)
lda.fits <- lda(km$cluster~., data = myboston_scaled)
lda.fits
plot(lda.fits, dimen = 2, col = classes)
lda.arrows(lda.fits, myscale = 1)
model_predictors <- dplyr::select(train, -crime_category)
dim(model_predictors)
dim(lda.fit$scaling)
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = classes,
colors=c("blue","yellow") )
myboston_scaled <- dplyr::select(myboston_scaled, -crim)
